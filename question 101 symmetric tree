https://leetcode.com/problems/symmetric-tree/description/

class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution:
    def levelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        treeList, result = [], []
        while True:
            if not root:
                return True

            else:
                if treeList != []:
                    new_lvl, new_result = [], []
                    for tree in treeList[-1]:
                        if tree.left:
                            new_lvl.append(tree.left)
                            new_result.append(tree.left.val)
                        else:
                            new_result.append(None)

                        if tree.right:
                            new_lvl.append(tree.right)
                            new_result.append(tree.right.val)
                        else:
                            new_result.append(None)

                    treeList.append(new_lvl)
                    result.append(new_result)
                    for i in range(len(new_result)):
                        if new_result[i] != new_result[len(new_result) - i - 1]:
                            return False

                else:
                    result = [[root.val]]
                    treeList = [[root]]


                if result[-1] == []:
                    return True
                    
T = TreeNode(1)
T.left = TreeNode(1)



S = Solution()

print(S.levelOrder(T))

a little bit faster solution.  That actually what you wanted to do:
class Solution:
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        if not root:
            return True
        return self.dfs(root.left,root.right)
    
    def dfs(self, p, q):
        if not p and not q:
            return True
        if not p or not q:
            return False
        if p.val != q.val:
            return False
        else:
            return self.dfs(p.left,q.right) and self.dfs(p.right, q.left)
