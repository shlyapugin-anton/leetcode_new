class Solution(object):
    def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        if len(nums) == 0:
            return [-1, -1]
        return [self.find_left(nums, target, 0, len(nums) - 1), self.find_right(nums, target, 0, len(nums) - 1)]

    def find_left(self, nums, target, left, right):
        if left == right and nums[left] != target:
            return -1
        if nums[left] == target and left == 0:
            return left
        elif nums[left] == target and nums[left - 1] != target:
            return left
        else:
            if nums[left] > target:
                return -1
            else:
                mid = (left + right) // 2
                if nums[mid] >= target:
                    return self.find_left(nums, target, left, mid)
                else:
                    return self.find_left(nums, target, mid + 1, right)

    def find_right(self, nums, target, left, right):
        if left == right and nums[right] != target:
            return -1
        if nums[right] == target and right == len(nums) - 1:
            return right
        elif nums[right] == target and nums[right + 1] != target:
            return right
        else:
            if nums[right] < target:
                return -1
            else:
                tmp = left + right
                mid = (tmp) // 2 + int((((tmp / 2) % 1) * 2))
                if nums[mid] <= target:
                    return self.find_right(nums, target, mid, right)
                else:
                    return self.find_right(nums, target, left, mid - 1)
