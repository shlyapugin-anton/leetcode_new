from sympy import Symbol
from sympy import expand
import time

start_time = time.time()
q = Symbol('q')
class polynomial:
    def __init__(self, dict):
        self.dict = dict

    def __add__(self, other):
        result = polynomial({})
        for d in self.dict:
            if d in other.dict:
                result.dict[d] = self.dict[d] + other.dict[d]
            else:
                result.dict[d] = self.dict[d]
        for d in other.dict:
            if d not in result.dict:
                result.dict[d] = other.dict[d]
        return result

    def __str__(self):
        result = ''
        for d in self.dict:
            result += 'z^' + str(d) + ' * ' + '{{{' + str(self.dict[d]) + 
            '}}}' + ' + '
        return result

    def __mul__(self, other):
        result = polynomial({})
        transitional_deg = tuple()
        for d in self.dict:
            for j in other.dict:
                transitional_deg = (d[0] + j[0], d[1] + j[1])
                result += polynomial({transitional_deg: expand(self.dict[d] 
                * other.dict[j] * q ** ((d[0] * j[1] - j[0] * d[1]) / 2))})
        return result

    def __pow__(self, power, modulo=None):
        result = polynomial({(0, 0): 1})
        i = 0
        while i < power:
            result *= self
            i += 1
        return result

def multiple_polynomial(string):

    s = str(input())
    t = s.split('_')
    deg_1 = t[0][t[0].find('(') + 1:t[0].rfind(')')]
    deg_1 = deg_1.split(',')
    deg_2 = t[1][t[1].find('(') + 1:t[1].rfind(')')]
    deg_2 = deg_2.split((','))

    deg_1 = (int(deg_1[0]), int(deg_1[1]))
    deg_2 = (int(deg_2[0]), int(deg_2[1]))

    pol_1 = t[0].split('*')
    pol_1 = pol_1[1][1:-1]
    pol_2 = t[1].split('*')
    pol_2 = pol_2[1][1:-1]
    pol_1 = pol_1.split('+')
    pol_2 = pol_2.split('+')
    j_1 = 0
    j_2 = 0
    for monom in pol_1:
        pose = monom.rfind('q')
        if pose > 0:
            num = int(monom[:pose])
        else:
            num = 1
        pose = monom.find('^')
        deg = int(monom[pose + 1])
        j_1 += num * (Symbol('q') ** deg)

    for monom in pol_2:
        pose = monom.rfind('q')
        if pose > 0:
            num = int(monom[:pose])
        else:
            num = 1
        pose = monom.find('^')
        deg = int(monom[pose + 1])
        j_2 += num * (Symbol('q') ** deg)
    pol_1 = polynomial({deg_1: j_1})
    pol_2 = polynomial({deg_2: j_2})
    print(pol_2 * pol_1)

def pow_polynomial(string):

    s = str(input())
    t = s.split('_')


    deg_1 = t[0][t[0].find('(') + 1:t[0].rfind(')')]
    deg_1 = deg_1.split(',')
    deg_1 = (int(deg_1[0]), int(deg_1[1]))
    print(deg_1)

f = open('result.txt', 'w')

test_polynomial = polynomial({(1, 0): 1, (-1, 0): 1, (0, 1): 1, (0, -1): 1})
f.write(str(pow(test_polynomial, 4)))
print("--- %s seconds ---" % (time.time() - start_time))
f.close()
