class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None


class Solution:
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """

        if root != None:
            b = [root.val]

            if root.left != None:
                a = self.inorderTraversal(root.left)
                a.extend(b)
                if root.right != None:
                    a.extend(self.inorderTraversal(root.right))
                return a
            else:
                if root.right != None:
                    b.extend(self.inorderTraversal(root.right))
                return b
            self.inorderTraversal(root.right)

        else:
            return []





Tree = TreeNode(1)
Tree.right = TreeNode(2)
Tree.right.left = TreeNode(3)

T = Solution()
print(T.inorderTraversal(Tree))


#my iterative algorithm

class Solution:
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        result, stack = [], []
        if root:
            while True:
                while root:
                    stack.append(root)
                    root = root.left

                if stack != []:
                    root = stack.pop()
                else:
                    return result

                result.append(root.val)
                while not root.right and stack != []:
                    root = stack.pop()
                    result.append(root.val)
                root = root.right


        else:
            return []

UPD (my recursive code, x2 faster, beats ~99%)
class Solution:
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        if not root:
            return []
        else:
            if root.left and root.right:
                t = self.inorderTraversal(root.left)
                t += [root.val]
                t += self.inorderTraversal(root.right)
                return t
            elif root.left:
                t = self.inorderTraversal(root.left)
                t += [root.val]
                return t
            elif root.right:
                t = [root.val]
                t += self.inorderTraversal(root.right)
                return t
            else:
                return [root.val]
